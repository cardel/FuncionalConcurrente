/*
 * This Scala source file was generated by the Gradle 'init' task.
 */
package power
import common._
import montecarlo.MonteCarlo
object App {
 
  def power(x:Double,p:Double): Double =  {
    Math.pow(x,p)

  }
  //SumaSegmento
  def SumaSegmento(A:Array[Int],p:Double,t:Int,s:Int):Double = {
    var sum:Double = 0.0

    for (i <- t to s) {
      sum += power(A(i),p)
    }
    sum
  }

  def SumaSegmentoP2(A:Array[Int],p:Double):Double = {
    val m:Int = A.length/2
    val (p1,p2) = (SumaSegmento(A,p,0,m),SumaSegmento(A,p,m+1,A.length-1))
    power(p1+p2,1/p)

  }
  def SumaSegmentoParalelo(A:Array[Int], p:Double):Double = {
    val m:Int = A.length/2
    val (suma1,suma2) = parallel(
      SumaSegmento(A,p,0,m),
      SumaSegmento(A,p,m+1,A.length-1)
      )
    power(suma1+suma2,1/p)
  }
  
  //Suma segumento 4 procesos
  def SumaSegmentoParalelo4(A:Array[Int], p:Double):Double = {
    val m:Int = A.length/4
    val (suma1,suma2,suma3,suma4) = parallel(
      SumaSegmento(A,p,0,m),
      SumaSegmento(A,p,m+1,2*m),
      SumaSegmento(A,p,2*m+1,3*m),
      SumaSegmento(A,p,3*m+1,A.length-1)
      )
    power(suma1+suma2+suma3+suma4,1/p)
      
  }
  //Suma segmento n procesos
  def SumaSegmentoParaleloN(A:Array[Int], p:Double, s:Int, t:Int):Double = {
    if (t-s >= 2) {
      val q:Int = (t+s)/2
      val (sum1,sum2) = parallel(
        SumaSegmentoParaleloN(A,p,s,q),
        SumaSegmentoParaleloN(A,p,q+1,t)
        )
      sum1+sum2
    } 
    else {
      SumaSegmento(A,p,s,t)
    }
     
  }

  def main(args: Array[String]): Unit = {
    val l = Array(1,2,3,4,5,6,7,8,9,10) // n(n+1)(2n+1)/6

    println(power(SumaSegmento(l,2.0,0,l.length-1),1/2.0))
    println(SumaSegmentoP2(l,2.0))
    println(SumaSegmentoParalelo(l,2.0))
    
    val l2 = (1 to 1000000).toArray
    val t1 = System.currentTimeMillis()
    println(SumaSegmentoP2(l2,2.0))
    println("El tiempo de ejecución es " + (System.currentTimeMillis()-t1))
    val t2 = System.currentTimeMillis()
    println(SumaSegmentoParalelo(l2,2.0))
    println("El tiempo de ejecución paralelo es " + (System.currentTimeMillis()-t2))
    val t3 = System.currentTimeMillis()
    println(SumaSegmentoParalelo4(l2,2.0))
    println("El tiempo de ejecución paralelo 4 es " + (System.currentTimeMillis()-t3))
    val t4 = System.currentTimeMillis()
    println(power(SumaSegmentoParaleloN(l2,2.0,0,l2.length-1),1/2.0))
    println("El tiempo de ejecución con n procesos es " + (System.currentTimeMillis()-t4))
    //Experimento de montcarlo
    val t5 = System.currentTimeMillis()
    val m = new MonteCarlo()
    println(m.lanzarExperimento(1000.0))
    println(m.lanzarExperimento(100000.0))
    println(m.lanzarExperimento(1000000.0))
    
    val t6 = System.currentTimeMillis()
    println(4*m.lanzarExperimento(100000000.0)/100000000.0)
    println("El tiempo de ejecución de montecarlo secuencial es " + (System.currentTimeMillis()-t6))

    val t7 = System.currentTimeMillis()
    println(4*m.lanzarExperimentoParalelo(100000000.0)/100000000.0)
    
    println("El tiempo de ejecución de montecarlo paralelo es " + (System.currentTimeMillis()-t7))

  }
}  
